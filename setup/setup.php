#!/usr/bin/env php
<?php
error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING);

require "vendor/autoload.php";
require "Db.php";

echo <<< WELCOME

Welcome to codolab (a clone of WYF Framework)
=============================================

This guide will help you set up and run codolab.

WELCOME;

$name = get_response(
    "What is the name of your application", 
    null, null, true
);

$home = get_response("Where is your application residing", getcwd(), null, null, true) . "/";
$prefix = get_response("What is the prefix of your application (Leave blank if you do not want a prefix)");
if($prefix == '') 
{
    $prefix = '';
}
else
{
    $prefix = "/$prefix";
}

$db = get_db_credentials();

do
{
    try{
        echo "\nTesting your database connection ... ";
        Db::get($db);
        $failed = false;
    }
    catch(Exception $e)
    {
        //fputs(STDERR, "Failed\n Could not establish a connection to the database.");
        $response = get_response(
            "Failed\nCould not establish a connection to the database. Would you like to provide new credentials", 
            'yes', array('yes','no'), true
        );
        
        if($response == 'yes')
        {
            echo "Getting new credentials ...\n";
            $db = get_db_credentials();        
            $failed = true;
        }
        else
        {
            exit();
        }
    }
} while($failed);

echo("OK");

echo "\nSetting up the configuration files ...\n";

mkdir2($home . 'app');
mkdir2($home . 'app/cache');
mkdir2($home . 'app/cache/code');
mkdir2($home . 'app/cache/menus');
mkdir2($home . 'app/cache/template_compile');
mkdir2($home . 'app/logs');
mkdir2($home . 'app/modules');
mkdir2($home . 'app/modules/system');
mkdir2($home . 'app/temp');
mkdir2($home . 'app/themes');
mkdir2($home . 'app/uploads');

copy_dir("vendor/codollc/codolab/setup/factory/*", "$home/app");
copy_dir("vendor/codollc/codolab/setup/config_sample", "$home/app");
copy("vendor/codollc/codolab/setup/htaccess", ".htaccess");
create_file(
    "$home/app/cache/menus/side_menu_1.html",
    str_replace(
        '{$prefix}', 
        "$prefix", 
        file_get_contents("vendor/codollc/codolab/setup/factory/cache/menus/side_menu_1.html")
    )
);

$system = <<< SYSTEM
<?php
\$redirect_path = "vendor/codollc/codolab/src/modules/system";
\$package_name = "System";
\$package_path = "system";
\$package_schema = "system";
SYSTEM;
create_file($home . 'app/modules/system/package_redirect.php', $system);
$date = date("jS F, Y H:i:s");

// Generate the default index.php script
$index = <<< "INDEX"
<?php
/**
 * Auto generated by WYF Framework setup script. 
 * $date
 */
require "vendor/autoload.php";
require "entry.php";
INDEX;

create_file($home . 'index.php', $index);

// Generate a default documented configuration file
$config = <<< "CONFIG"
<?php
/*
 * Auto generated by WYF Framework setup script. 
 * $date 
 */
        
// Show all errors except for notices and strict standards
error_reporting(E_ALL ^ (E_NOTICE ^ E_STRICT));
        
/*
 * Use this variable to specify which database configuration to use. 
 */
\$selected = "main";

\$config = array(
    'home' => "$home",
    'prefix' => "$prefix",
    'name' => "$name",
    'db' => array(
    	"main" => array(
            'driver' => 'postgresql',
            'user' => '{$db['user']}',
            'host' => '{$db['host']}',
            'password' => '{$db['password']}',
            'name' => '{$db['name']}',
            'port' => '{$db['port']}'    	
    	)
    ),
    'cache' => array(
        'method' => 'redis',
	'host' => 'localhost',
	'port' => 6379,
	'models' => true,
	'server_key' => 'localhost'
    ),
    'theme' => 'default'
);
CONFIG;

create_file($home . 'app/config.php', $config);
create_file($home . 'app/includes.php', "<?php\n");
create_file($home . 'app/bootstrap.php', "<?php\n");

// Try to initialize the wyf framework.
require "wyf_bootstrap.php";

echo "\nSetting up the database ...\n";

db_set_up();

$username = get_response("Enter a username for the superuser account", 'super', null, true);
$email = get_response('Provide your email address', null, null, true);
Db::query("INSERT INTO system.roles(role_id, role_name) VALUES(1, 'System Administrator')");
Db::query(
    sprintf(
    	"INSERT INTO system.users (user_name, password, role_id, first_name, last_name, user_status, email) 
    	VALUES ('%s', '%s', 1, 'Super', 'User', 2, '%s')", 
        Db::escape($username),
        Db::escape($username),
        Db::escape($email)
    )
);
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'can_log_in_to_web', 1, '/dashboard');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_audit_trail_can_add', 1, '/system/audit_trail');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_audit_trail_can_edit', 1, '/system/audit_trail');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_audit_trail_can_delete', 1, '/system/audit_trail');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_audit_trail_can_view', 1, '/system/audit_trail');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_audit_trail_can_export', 1, '/system/audit_trail');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_audit_trail_can_import', 1, '/system/audit_trail');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_roles_can_add', 1, '/system/roles');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_roles_can_edit', 1, '/system/roles');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_roles_can_delete', 1, '/system/roles');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_roles_can_view', 1, '/system/roles');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_roles_can_export', 1, '/system/roles');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_roles_can_import', 1, '/system/roles');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_users_can_add', 1, '/system/users');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_users_can_edit', 1, '/system/users');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_users_can_delete', 1, '/system/users');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_users_can_view', 1, '/system/users');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_users_can_export', 1, '/system/users');");
Db::query("INSERT INTO permissions (role_id, permission, value, module) VALUES (1, 'system_users_can_import', 1, '/system/users');");

echo "\nDone! Happy coding!!!!! ;)\n\n";

/**
 * A utility function for creating files. Checks if the files are writable and
 * goes ahead to create them. If they are not it just dies!
 */
function create_file($file, $contents)
{
    if(is_writable(dirname($file)))
    {
        file_put_contents($file, $contents);
        return true;
    }
    else
    {
        fputs(
            STDERR,
            "Error writing to file $file. Please ensure you have the correct permissions"
        );
        return false;
    }
}

/**
 * A function for getting answers to questions from users interractively.
 * @param $question The question you want to ask
 * @param $answers An array of possible answers that this function should validate
 * @param $default The default answer this function should assume for the user.
 * @param $notNull Is the answer required
 */
function get_response($question, $default=null, $answers=null, $notNull = false)
{
    echo $question;
    if(is_array($answers))
    {
        if(count($answers) > 0) echo " (" . implode("/", $answers) . ")";
    }
    
    echo " [$default]: ";
    $response = str_replace(array("\n", "\r"),array("",""),fgets(STDIN));

    if($response == "" && $notNull === true && $default == '')
    {
        echo "A value is required.\n";
        return get_response($question, $answers, $default, $notNull);
    }
    else if($response == "" && $notNull === true && $default != '')
    {
        return $default;
    }
    else if($response == "")
    {
        return $default;
    }
    else
    {
        if(count($answers) == 0)
        {
            return $response;
        }
        foreach($answers as $answer)
        {
            if(strtolower($answer) == strtolower($response))
            {
                return strtolower($answer);
            }
        }
        echo "Please provide a valid answer.\n";
        return get_response($question, $answers, $default, $notNull);
    }
}

function mkdir2($path)
{
    echo("Creating directory $path\n");
    if(!\is_writable(dirname($path)))
    {
        fputs(STDERR, "You do not have permissions to create the $path directory\n");
        die();
    }
    else if(\is_dir($path))
    {
        echo ("Directory $path already exists. I will skip creating it ...\n");
    }
    else
    {
        mkdir($path);
    }
    return $path;
}

function copy_dir($source, $destination)
{
    foreach(glob($source) as $file)
    {
        $newFile = (is_dir($destination) ?  "$destination/" : ''). basename("$file");
        
        if(is_dir($file))
        {
            mkdir2($newFile);
            copy_dir("$file/*", $newFile);
        }
        else
        {
            copy($file, $newFile);
        }
    }
}

function get_db_credentials()
{
    $db = array();
    $db['host'] = get_response("Where is your application's database hosted", 'localhost', null, true);
    $db['port'] = get_response("What is the port of this database", '5432', null, true);
    $db['user'] = get_response("What is the database username", 'postgres', null, true);
    $db['password'] = get_response("What is the password for the database");
    $db['name'] = get_response("What is the name of your application's database (please ensure that the database exists)", null, null, true);
    
    return $db;
}


function db_set_up()
{
    Db::query("CREATE SCHEMA system;");
    
    Db::query("
        CREATE TABLE system.roles (
            role_id serial NOT NULL,
            role_name character varying(64),
            CONSTRAINT roles_role_id_pkey PRIMARY KEY (role_id)
        );"
    );

    Db::query("
        CREATE TABLE system.users (
            user_id serial NOT NULL,
            user_name character varying(64) NOT NULL,
            password character varying(64) NOT NULL,
            role_id integer,
            first_name character varying(64) NOT NULL,
            last_name character varying(64) NOT NULL,
            other_names character varying(64),
            user_status numeric(1,0),
            email character varying(64) NOT NULL,
            CONSTRAINT users_user_id_pkey PRIMARY KEY (user_id),
            CONSTRAINT user_name_ukey UNIQUE (user_name),
            CONSTRAINT users_role_id_fkey FOREIGN KEY (role_id) 
                REFERENCES system.roles(role_id) 
                ON DELETE SET NULL
        );"
    );

    Db::query("
        CREATE TABLE system.audit_trail (
            audit_trail_id serial NOT NULL,
            user_id integer NOT NULL,
            item_id integer NOT NULL,
            item_type character varying(64) NOT NULL,
            description character varying(4000) NOT NULL,
            audit_date timestamp without time zone NOT NULL,
            type numeric NOT NULL,
            data text,
            CONSTRAINT audit_trail_audit_trail_id_pkey PRIMARY KEY (audit_trail_id),
            CONSTRAINT audit_trail_user_id_fkey FOREIGN KEY (user_id) 
                REFERENCES system.users(user_id) 
                ON DELETE SET NULL
        );"
    );

    Db::query("
        CREATE TABLE system.audit_trail_data (
            audit_trail_data_id serial NOT NULL,
            audit_trail_id integer NOT NULL,
            data text,
            CONSTRAINT audit_trail_data_audit_trail_data_id_pkey PRIMARY KEY (audit_trail_data_id)
        );"
    );

    Db::query("
        CREATE TABLE system.permissions (
            permission_id serial NOT NULL,
            role_id integer NOT NULL,
            permission character varying(4000),
            value numeric NOT NULL,
            module character varying(4000),
            CONSTRAINT permissions_permission_id_pkey PRIMARY KEY (permission_id),
            CONSTRAINT permissios_role_id_fkey FOREIGN KEY (role_id) 
                REFERENCES system.roles(role_id) 
                ON DELETE CASCADE
        );"
    );
    
    Db::query("
        CREATE TABLE system.api_keys
        (
            api_key_id serial NOT NULL,
            user_id integer NOT NULL,
            active boolean NOT NULL,
            key character varying(512) NOT NULL,
            secret character varying(512) NOT NULL,
            CONSTRAINT api_keys_pkey PRIMARY KEY (api_key_id ),
            CONSTRAINT api_keys_user_id_fkey FOREIGN KEY (user_id)
                REFERENCES system.users (user_id) MATCH SIMPLE
                ON UPDATE NO ACTION ON DELETE NO ACTION
        );"
    );

    Db::query("
        CREATE TABLE system.notes
        (
            note_id serial NOT NULL,
            note character varying(4000),
            note_time timestamp without time zone NOT NULL,
            item_id integer NOT NULL,
            item_type character varying(1024) NOT NULL,
            user_id integer NOT NULL,
            CONSTRAINT notes_note_id_pkey PRIMARY KEY (note_id),
            CONSTRAINT notes_user_id_fkey FOREIGN KEY (user_id)
                REFERENCES system.users (user_id) MATCH SIMPLE
                ON UPDATE NO ACTION ON DELETE NO ACTION
        );"
    );

    Db::query("
        CREATE TABLE system.binary_objects
        (
            object_id serial NOT NULL,
            data bytea,
            CONSTRAINT binary_objects_pkey PRIMARY KEY (object_id)
        );"
    );
    
    Db::query("
        CREATE TABLE system.note_attachments
        (
            note_attachment_id serial NOT NULL,
            description character varying(4000) NOT NULL,
            object_id integer NOT NULL,
            note_id integer NOT NULL,
            CONSTRAINT note_attachments_pkey PRIMARY KEY (note_attachment_id),
            CONSTRAINT note_attachments_note_id_fkey FOREIGN KEY (note_id)
                REFERENCES system.notes (note_id) MATCH SIMPLE
                ON UPDATE NO ACTION ON DELETE NO ACTION
        );"
    );
    
    Db::query("
        CREATE TABLE system.configurations
        (
            configuration_id serial NOT NULL,
            key character varying(4000) NOT NULL,
            value character varying(4000),
            user_id integer NOT NULL,
            CONSTRAINT configuration_id_pkey PRIMARY KEY (configuration_id)
        );"
    );
}